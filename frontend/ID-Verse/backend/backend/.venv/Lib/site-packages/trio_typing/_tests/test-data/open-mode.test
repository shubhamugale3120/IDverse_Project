[case testOpenType]
import trio
async def test() -> None:
    reveal_type(await trio.open_file("foo"))  # N: Revealed type is "trio.AsyncTextFileIO"
    reveal_type(await trio.open_file("foo", "rb"))  # N: Revealed type is "trio.AsyncBufferedFileIO"
    reveal_type(await trio.open_file("foo", "rb", int(trio.current_time())))  # N: Revealed type is "trio.AsyncFileIO"
    reveal_type(await trio.open_file("foo", buffering=0, mode="w+b"))  # N: Revealed type is "trio.AsyncFileIO"
    reveal_type(await trio.open_file("foo", "w"))  # N: Revealed type is "trio.AsyncTextFileIO"
    reveal_type(await trio.open_file("foo", input()))  # N: Revealed type is "trio.AsyncIO[Any]"

    reveal_type(trio.wrap_file(open("foo")))  # N: Revealed type is "trio.AsyncTextIO"
    reveal_type(trio.wrap_file(open("foo", "rb")))  # N: Revealed type is "trio.AsyncBinaryIO"
    reveal_type(trio.wrap_file(open("foo", "w")))  # N: Revealed type is "trio.AsyncTextIO"
    reveal_type(trio.wrap_file(open("foo", input())))  # N: Revealed type is "trio.AsyncIO[Any]"

    path = await trio.Path.cwd() / "hello"
    reveal_type(await path.open())  # N: Revealed type is "trio.AsyncTextFileIO"
    reveal_type(await path.open("rb"))  # N: Revealed type is "trio.AsyncBufferedFileIO"
    reveal_type(await path.open("rb", int(trio.current_time())))  # N: Revealed type is "trio.AsyncFileIO"
    reveal_type(await path.open(buffering=0, mode="w+b"))  # N: Revealed type is "trio.AsyncFileIO"
    reveal_type(await path.open("w"))  # N: Revealed type is "trio.AsyncTextFileIO"
    reveal_type(await path.open(input()))  # N: Revealed type is "trio.AsyncIO[Any]"
